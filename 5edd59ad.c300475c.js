(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{128:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return O})),t.d(n,"metadata",(function(){return j})),t.d(n,"rightToc",(function(){return h})),t.d(n,"default",(function(){return k}));var i=t(3),r=t(7),a=t(0),l=t.n(a),d=t(133),s=t(146),b=t(134),o=t(90),c=t.n(o);const u=37,p=39;var m=function(e){const{lazy:n,block:t,children:i,defaultValue:r,values:d,groupId:o,className:m}=e,{tabGroupChoices:g,setTabGroupChoices:O}=Object(s.a)(),[j,h]=Object(a.useState)(r);if(null!=o){const e=g[o];null!=e&&e!==j&&d.some((n=>n.value===e))&&h(e)}const f=e=>{h(e),null!=o&&O(o,e)},k=[];return l.a.createElement("div",null,l.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(b.a)("tabs",{"tabs--block":t},m)},d.map((({value:e,label:n})=>l.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===e,className:Object(b.a)("tabs__item",c.a.tabItem,{"tabs__item--active":j===e}),key:e,ref:e=>k.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case p:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case u:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(k,e.target,e)},onFocus:()=>f(e),onClick:()=>{f(e)}},n)))),n?Object(a.cloneElement)(i.filter((e=>e.props.value===j))[0],{className:"margin-vert--md"}):l.a.createElement("div",{className:"margin-vert--md"},i.map(((e,n)=>Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==j})))))};var g=function({children:e,hidden:n,className:t}){return l.a.createElement("div",Object(i.a)({role:"tabpanel"},{hidden:n,className:t}),e)},O={title:"Mit Objektorientierung zum Multitasking",sidebar_label:"2. Objektorientierung",description:"Multitasking beim Arduino mit objektorientierter Programmierung realisieren.",custom_edit_url:null,keywords:["Arduino","Multitasking","objektorientiert","Klassen","Objekte","Blinken","LED","Library"]},j={unversionedId:"arduino/objectOriented",id:"arduino/objectOriented",isDocsHomePage:!1,title:"Mit Objektorientierung zum Multitasking",description:"Multitasking beim Arduino mit objektorientierter Programmierung realisieren.",source:"@site/docs/arduino/objectOriented.md",slug:"/arduino/objectOriented",permalink:"/docs/arduino/objectOriented",editUrl:null,version:"current",sidebar_label:"2. Objektorientierung",sidebar:"sideBarArduino",previous:{title:"Eine Men\xfcsteuerung mit zwei Tastern und drei LEDs",permalink:"/docs/arduino/simpleMenu"},next:{title:"Eine sehr kurz Geschichte des Elektromotors",permalink:"/docs/motor/wieEsBegann"}},h=[{value:"Objektorientierte Programmierung",id:"objektorientierte-programmierung",children:[]},{value:"Beispiel einer LED-Klasse",id:"beispiel-einer-led-klasse",children:[{value:"Klassendefinition",id:"klassendefinition",children:[]},{value:"Konstruktor",id:"konstruktor",children:[]},{value:"Methode zum Umschalten",id:"methode-zum-umschalten",children:[]},{value:"Das vollst\xe4ndige Programm",id:"das-vollst\xe4ndige-programm",children:[]}]},{value:"Wie nutze ich Tabs mit Klassen",id:"wie-nutze-ich-tabs-mit-klassen",children:[{value:"Aufgaben",id:"aufgaben",children:[]}]},{value:"Ein Array mit LED Objekten",id:"ein-array-mit-led-objekten",children:[]},{value:"Links",id:"links",children:[]}],f={rightToc:h};function k(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(d.b)("wrapper",Object(i.a)({},f,a,{components:n,mdxType:"MDXLayout"}),Object(d.b)("h2",{id:"objektorientierte-programmierung"},"Objektorientierte Programmierung"),Object(d.b)("p",null,Object(d.b)("strong",{parentName:"p"},"Klassen")," und ",Object(d.b)("strong",{parentName:"p"},"Objekte")," stellen eine Weiterentwicklung des Konzeptes von Variablen und Funktionen dar. W\xe4hrend eine Variable nur einen Wert (oder als Array auch mehrere Werte) besitzen kann, so kann ",Object(d.b)("strong",{parentName:"p"},"ein Objekt zus\xe4tzlich auch Methoden besitzen"),",  welche die Variablen verarbeiten k\xf6nnen. Dies erm\xf6glicht es, einen gut lesbaren und flexibel einsetzbaren Code zu schreiben."),Object(d.b)("p",null,"Stehen bei Variablen ",Object(d.b)("strong",{parentName:"p"},"vordefinierte Variablentypen")," zur Verf\xfcgung (",Object(d.b)("inlineCode",{parentName:"p"},"int"),", ",Object(d.b)("inlineCode",{parentName:"p"},"float"),", ",Object(d.b)("inlineCode",{parentName:"p"},"char"),", ...), so ist es bei Objekten notwendig, den ",Object(d.b)("strong",{parentName:"p"},"Objekttyp")," selbst als eine Art Bauplan f\xfcr das Objekt zu programmieren. In der objektorientierten Programmierung wird dieser (selbst geschriebene) Objekttyp ",Object(d.b)("strong",{parentName:"p"},"Klasse")," genannt."),Object(d.b)("img",{src:"/img/arduino/ObjektKlassse.png",alt:"Klasse und Objekt",width:"400px",class:"center"}),Object(d.b)("p",null,"Aber was ist nun der ",Object(d.b)("strong",{parentName:"p"},"Vorteil von Klassen bzw. Objekten"),". Nehmen wir als Beispiel eine Schaltung mit 5 LEDs. Jede LED hat einen eigenen Pin-Anschluss, einen eigenen Zustand (",Object(d.b)("em",{parentName:"p"},"an/aus"),") und soll mit festgelegten An-/Auszeiten blinken k\xf6nnen. Dieses Verhalten lie\xdfe sich ohne Weiteres auch ohne eine Klasse f\xfcr die LEDs realisieren. Allerdings m\xfcssten daf\xfcr eine Menge globaler Variablen deklariert werden, damit jede  LED unabh\xe4ngig voneinander gesteuert werden kann. Das macht den Code schnell un\xfcbersichtlich und schwer zu lesen:"),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"bool zustandLED1;\nbool zustandLED2;\n// ...\n\nint anZeit1;\nint anZeit2;\n//  ...\n\nint ausZeit1;\nint ausZeit2;\n// ... \n")),Object(d.b)("p",null,"Der Vorteil der objektorientierten Programmierung liegt aber darin, das wir nur ",Object(d.b)("strong",{parentName:"p"},"eine")," Klasse f\xfcr beiliebig viele LEDs schreiben m\xfcssen. Ist die Klasse programmiert, k\xf6nnen beliebig viele Objekte f\xfcr die realen LEDs erzeugt werden. Der Code bleibt \xfcbersichtlich und leicht verst\xe4ndlich."),Object(d.b)("h2",{id:"beispiel-einer-led-klasse"},"Beispiel einer LED-Klasse"),Object(d.b)("p",null,"Am Beispiel einer einfachen LED-Klasse, welche eine LED umschalten (togglen) soll, wird im Folgenden das Grundkonzept der objektorientierten Programmierung erl\xe4utert. "),Object(d.b)("h3",{id:"klassendefinition"},"Klassendefinition"),Object(d.b)("p",null,"Um eine Klasse zu schreiben (oder besser zu definieren) wird das Schl\xfcsselwort ",Object(d.b)("inlineCode",{parentName:"p"},"class")," verwendet.  Zwischen die geschweiften Klammern ",Object(d.b)("inlineCode",{parentName:"p"},"{ ... }")," folgt der Code f\xfcr die Klasse. Nach der Klassenbeschreibung folgt ein Semikolon."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"class Led {\n  // Beschreibung der Klasse\n\n}; // Semikolon am Ende\n")),Object(d.b)("p",null,"Die LED soll sp\xe4ter mit einem einfachen Befehl (",Object(d.b)("inlineCode",{parentName:"p"},"toggle()"),") ihren Zustand umschalten k\xf6nnen (an/aus). Daf\xfcr muss die Klasse Attribute  (Variablen) zum Speichern des aktuellen LED-Zustands (",Object(d.b)("inlineCode",{parentName:"p"},"stateLed"),") und des verwendeten LED-Pins (",Object(d.b)("inlineCode",{parentName:"p"},"pinLed"),") haben."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"class Led {\n                          // Attribute (Eigenschaften) der Klasse\n    int  pinLed;          // LED-Pin\n    bool stateLed;        // Zustand der LED \n};\n")),Object(d.b)("h3",{id:"konstruktor"},"Konstruktor"),Object(d.b)("p",null,"Da eine Klasse nur eine Art Bauplan f\xfcr die sp\xe4teren Objekte ist, muss es auch eine M\xf6glichkeit geben, dem Objekt beim Erzeugen ein paar Informationen zu \xfcbergeben. Hierf\xfcr kann der ",Object(d.b)("strong",{parentName:"p"},"Konstruktor")," verwendet werden."),Object(d.b)("p",null,"Der Konstruktor ist eine spezielle Methode, welche einmalig beim Erzeugen eines Objektes aufgerufen wird. Der Konstruktor hat, wie alle anderen Methoden einer Klasse auch, Zugriff auf die Attribute (Variablen) einer Klasse. Der Konstruktor wird genauso wie eine normale Methode definiert, jedoch ohne das Schl\xfcsselwort ",Object(d.b)("inlineCode",{parentName:"p"},"void"),". ",Object(d.b)("strong",{parentName:"p"},"Der Name des Konstruktors entspricht dem Klassennamen"),"."),Object(d.b)("p",null,"Damit auf den Konstruktor auch zugegriffen werden kann, muss das der Klasse durch das Schl\xfcsselwort ",Object(d.b)("inlineCode",{parentName:"p"},"public:")," mitgeteilt werden. Auf alle Methoden und Attribute, die nach ",Object(d.b)("inlineCode",{parentName:"p"},"public:")," folgen, kann sp\xe4ter direkt zugegriffen."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"class Led {               // Beginn der Klassendefinition\n                          // Attribute (Eigenschaften) der Klasse\n    int  pinLed;          // LED-Pin\n    bool stateLed;        // Zustand der LED \n  //highlight-next-line  \n  public:                 // alle Methoden (oder Attribute) nach public sind \xf6ffentlich\n\n    //highlight-start\n    Led(int pPin) {       // Konstruktor (ohne void, int, etc.)\n      pinLed   = pPin;\n      stateLed = false;\n      pinMode(pin, OUTPUT);\n    }\n   //highlight-end \n};   \n")),Object(d.b)("h3",{id:"methode-zum-umschalten"},"Methode zum Umschalten"),Object(d.b)("p",null,"Was der LED-Klasse an dieser Stelle noch fehlt, ist die Methode ",Object(d.b)("inlineCode",{parentName:"p"},"toggle()")," zum Umschalten der LED. Da auf die Methode, genauso wie den Konstruktor, \xf6ffentlich zugegriffen werden soll, wird sie nach dem Schl\xfcsselwort ",Object(d.b)("inlineCode",{parentName:"p"},"public")," definiert."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"// Methode der Led-Klasse\nvoid toggle() {          // Die Methoden einer Klassen k\xf6nnen auf die Attribute zugreifen      \n  stateLed = !stateLed; \n  digitalWrite(pin, stateLed);\n}\n\n   \n")),Object(d.b)("p",null,"Mit der Zeile"),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"stateLed = !stateLed; \n")),Object(d.b)("p",null,"wird der logische Wert des Attributs ",Object(d.b)("inlineCode",{parentName:"p"},"stateLed")," negiert. War ",Object(d.b)("inlineCode",{parentName:"p"},"stateLed")," zuerst ",Object(d.b)("inlineCode",{parentName:"p"},"true"),", ist es danach ",Object(d.b)("inlineCode",{parentName:"p"},"false"),". Wird anschlie\xdfend der Zustand der LED mit dem Befehl "),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"digitalWrite(pin, stateLed);\n")),Object(d.b)("p",null,"aktualisiert, so \xe4ndert die LED bei jedem Aufruf der Methode ihren Zustand."),Object(d.b)("h3",{id:"das-vollst\xe4ndige-programm"},"Das vollst\xe4ndige Programm"),Object(d.b)("p",null,"Im vollst\xe4ndigen Programm sollen mit der obigen Klasse zwei LED Objekte ",Object(d.b)("inlineCode",{parentName:"p"},"ledGreen")," und ",Object(d.b)("inlineCode",{parentName:"p"},"ledRed")," erzeugt werden. Das Erzeugen eines neuen Objektes wird auch ",Object(d.b)("strong",{parentName:"p"},"instanziieren")," genannt, was nichts anderes bedeutet, als dass mit der Klasse eine neue ",Object(d.b)("strong",{parentName:"p"},"Instanz")," erzeugt wird."),Object(d.b)("p",null,"Mit dem Klassennamen (",Object(d.b)("inlineCode",{parentName:"p"},"Led"),") gefolgt von einem frei w\xe4hlbaren Namen f\xfcr das Objekt (z.B. ",Object(d.b)("inlineCode",{parentName:"p"},"ledGreen"),") und dem Parameter f\xfcr den Konstruktor k\xf6nnen nun verschiedene Objekte erzeugt werden."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"#define LED_GREEN 4\n#define LED_RED   5\n\nLed ledGreen(LED_GREEN);  // ein `Led` Objekt mit Pin 4\nLed ledRed(LED_RED);      // ein weiteres `Led` Objekt mit Pin 5\n\n")),Object(d.b)("p",null,"Zu guter Letzt muss die Method ",Object(d.b)("inlineCode",{parentName:"p"},"toggle()")," f\xfcr das jeweilige Objekt noch aufgerufen werden. Daf\xfcr wird das Objekt mit einem Punkt ",Object(d.b)("inlineCode",{parentName:"p"},".")," mit dem Methodennamen verkn\xfcpft."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"ledGreen.toggle();    // Methodenaufruf vom Objekt `ledGreen`\nledRed.toggle();      // Methodenaufruf vom Objekt `ledRed`\n\n")),Object(d.b)("p",null,"Zusammengefasst ergibt sich folgendes Programm f\xfcr zwei umschaltbare LEDs mit einer Led-Klasse."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{className:"language-arduino",metastring:'title="umschaltenObjekte.ino"',title:'"umschaltenObjekte.ino"'}),"#define LED_GREEN 3\n#define LED_RED   6\n\nclass Led {               // Beginn der Klassendefinition\n    int  pinLed;          // LED-Pin (Attritbute der Klasse)\n    bool stateLed;        // Zustand der LED \n\n  public:                 // alle Methoden (oder Attribute) nach public sind \xf6ffentlich\n    Led(int pPin) {       // Konstruktor (ohne void, int, etc.)\n      pinLed   = pPin;\n      stateLed = false;\n      pinMode(pinLed, OUTPUT);\n    }\n    void toggle() {       // Die Methoden einer Klassen k\xf6nnen auf die Attribute zugreifen      \n      stateLed = !stateLed; \n      digitalWrite(pinLed, stateLed);\n    }\n};                        // Eine Klassendefinition endet mit einem Semikolon\n\nLed ledGreen(LED_GREEN);  // ein `Led` Objekt mit dem Namen `ledGreen` mit Pin 4\nLed ledRed(LED_RED);      // ein weiteres `Led` Objekt mit Pin 5\n\nvoid setup() {\n  // bleibt leer\n}\n\nvoid loop() {\n  ledGreen.toggle();      // Methodenaufruf vom Objekt ledGreen\n  delay(200);\n  ledRed.toggle();        // Methodenaufruf vom Objekt ledGreen\n  delay(800);\n  ledGreen.toggle();\n  delay(200);\n  ledRed.toggle();\n  delay(800);\n}\n")),Object(d.b)("h2",{id:"wie-nutze-ich-tabs-mit-klassen"},"Wie nutze ich Tabs mit Klassen"),Object(d.b)("p",null,"Das vollst\xe4ndige Programm mit der LED Klasse kann auch in ",Object(d.b)("strong",{parentName:"p"},"mehrere Tabs unterteilt werden"),". Wird eine Klasse in einem separaten Tab definiert, so muss der Name des Tabs die ",Object(d.b)("strong",{parentName:"p"},"Dateiendung")," ",Object(d.b)("inlineCode",{parentName:"p"},".cpp")," erhalten. Au\xdferdem muss mit dem Befehl ",Object(d.b)("inlineCode",{parentName:"p"},'#include "LedKlasse.cpp"')," der entsprechende Tab ",Object(d.b)("strong",{parentName:"p"},"in das Hauptprogram eingebunden werden.")),Object(d.b)(m,{defaultValue:"Blink",values:[{label:"Blink",value:"Blink"},{label:"LedKlasse.cpp",value:"LedKlasse.cpp"}],mdxType:"Tabs"},Object(d.b)(g,{value:"Blink",mdxType:"TabItem"},Object(d.b)("p",null,"Das ",Object(d.b)("strong",{parentName:"p"},"Hauptprogramm")," (mit ",Object(d.b)("inlineCode",{parentName:"p"},"void setup()")," und ",Object(d.b)("inlineCode",{parentName:"p"},"void loop()"),") steht in dem ersten Tab mit dem Namen des Sketches (",Object(d.b)("inlineCode",{parentName:"p"},"Blink"),"). Klassen, welche in einem anderen Tab definiert werden, m\xfcssen mit dem Befehl ",Object(d.b)("inlineCode",{parentName:"p"},'#include "LedKlasse.cpp"')," in das Hauptprogramm eingebunden werden."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{className:"language-arduino",metastring:'title="Blink"',title:'"Blink"'}),'//highlight-next-line\n#include "LedKlasse.cpp"  // Einbinden der Datei LedKlasse.cpp mit der `Led` Klasse\n\n#define LED_GREEN 3\n#define LED_RED   6\n\nLed ledGreen(LED_GREEN);  // ein `Led` Objekt mit dem Namen `ledGreen` mit Pin 4\nLed ledRed(LED_RED);      // ein weiteres `Led` Objekt mit Pin 5\n\nvoid setup() {\n  // bleibt leer\n}\n\nvoid loop() {\n  ledGreen.toggle();      // Methodenaufruf vom Objekt ledGreen\n  delay(200);\n  ledRed.toggle();        // Methodenaufruf vom Objekt ledGreen\n  delay(800);\n  ledGreen.toggle();\n  delay(200);\n  ledRed.toggle();\n  delay(800);\n}\n'))),Object(d.b)(g,{value:"LedKlasse.cpp",mdxType:"TabItem"},Object(d.b)("p",null,"Tabs, in denen eine ",Object(d.b)("strong",{parentName:"p"},"Klasse")," definiert wird, m\xfcssen mit der Dateiendung ",Object(d.b)("inlineCode",{parentName:"p"},".cpp")," (z.B. ",Object(d.b)("inlineCode",{parentName:"p"},"LedKlasse.cpp"),") benannt werden. Damit in diesen Tabs auch die Arduino-Befehle genutzt werden k\xf6nnen, muss die ",Object(d.b)("strong",{parentName:"p"},"Arduino-Bibliothek")," mit dem Befehl ",Object(d.b)("inlineCode",{parentName:"p"},"#include <Arduino.h> ")," ",Object(d.b)("strong",{parentName:"p"},"eingebunden werden"),"."),Object(d.b)("p",null,"Au\xdferdem m\xfcssen die Tabs (eigentlich eigene Dateien) dem Hauptprogramm zug\xe4nglich gemacht werden. Dies geschieht auch mit dem ",Object(d.b)("inlineCode",{parentName:"p"},"#inlcude")," Befehl."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{className:"language-arduino",metastring:'title="LedKlasse.cpp"',title:'"LedKlasse.cpp"'}),"//highlight-next-line\n#include <Arduino.h>      // Einbinden der Datei Arduino-Bibliothek\n\nclass Led {               // Beginn der Klassendefinition\n    int  pinLed;          // LED-Pin (Attritbute der Klasse)\n    bool stateLed;        // Zustand der LED \n\n  public:                 // alle Methoden (oder Attribute) nach public sind \xf6ffentlich\n    Led(int pPin) {       // Konstruktor (ohne void, int, etc.)\n      pinLed   = pPin;\n      stateLed = false;\n      pinMode(pinLed, OUTPUT);\n    }\n    void toggle() {       // Die Methoden einer Klassen k\xf6nnen auf die Attribute zugreifen      \n      stateLed = !stateLed; \n      digitalWrite(pinLed, stateLed);\n    }\n};                        // Eine Klassendefinition endet immer mit einem Semikolon\n")))),Object(d.b)("p",null,"Das vollst\xe4ndige ",Object(d.b)("a",{target:"_blank",href:t(192).default},"Blink-Programm")," kann auch heruntergeladen werden."),Object(d.b)("h3",{id:"aufgaben"},"Aufgaben"),Object(d.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(d.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(d.b)("h5",{parentName:"div"},Object(d.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(d.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(d.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),Object(d.b)("strong",{parentName:"h5"},"\xdcben"))),Object(d.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(d.b)("ol",{parentName:"div"},Object(d.b)("li",{parentName:"ol"},Object(d.b)("p",{parentName:"li"},"Erweitern Sie die ",Object(d.b)("inlineCode",{parentName:"p"},"Led")," Klasse im obigen Beispielprogramm um die Methoden ",Object(d.b)("inlineCode",{parentName:"p"},"anschalten()")," und ",Object(d.b)("inlineCode",{parentName:"p"},"ausschalten()"),". Testen Sie die neuen Methoden mit einem geeignetem Programm.")),Object(d.b)("li",{parentName:"ol"},Object(d.b)("p",{parentName:"li"},"Schreiben Sie eine Klasse ",Object(d.b)("inlineCode",{parentName:"p"},"Blinker"),", welche eine Led blinken l\xe4sst."),Object(d.b)("p",{parentName:"li"},"Um die LED mit den  vorgegebenen An- und Auszeiten blinken zu lassen, wird eine Methode ",Object(d.b)("inlineCode",{parentName:"p"},"update()")," ben\xf6tigt, welche regelm\xe4\xdfig aufgerufen werden muss. Die Methode misst die Zeit seit dem letzten Umschalten der LED und \xfcberpr\xfcft, ob die LED wieder umgeschaltet werden muss."),Object(d.b)("p",{parentName:"li"},"Nutzen Sie die Vorlage und erg\xe4nzen Sie den Code f\xfcr die Methoden und ",Object(d.b)("inlineCode",{parentName:"p"},"update()")," und ",Object(d.b)("inlineCode",{parentName:"p"},"setBlink()")," (legt die An-/Auszeit des Blinkers fest)."),Object(d.b)("pre",{parentName:"li"},Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"#define LED1 3 \n#define LED2 5\n\nclass Blinker\n{\n    int onTime;  // in ms\n    int offTime; // in ms\n    int pinLed;\n    int stateLED;\n    unsigned long lastTime;\n\n  public:\n    Blinker(int pin)\n    {\n      onTime = 1000;\n      offTime = 1000;\n      pinLed = pin;\n      lastTime = 0;\n      stateLED = LOW;\n      \n      pinMode(pinLed, OUTPUT);\n    }\n\n    // L\xe4sst die LED durch regelm\xe4\xdfiges Aufrufen blinken.\n    void update() \n    {\n      // ***** Fehlenden Code erg\xe4nzen *****\n    }\n\n    // Konfiguriert die An- und Auszeit des Blinkers\n    void setBlink(int pOn, int pOff)\n    {\n      // ***** Fehlenden Code erg\xe4nzen *****\n    }\n}; \n\nBlinker blink1(LED1);\nBlinker blink2(LED2);\n\nvoid setup() {\n  blink1.setBlink(500, 100);\n  blink2.setBlink(400, 200);\n}\n\nvoid loop() {\n  blink1.update();\n  blink2.update();\n}\n")))))),Object(d.b)("h2",{id:"ein-array-mit-led-objekten"},"Ein Array mit LED Objekten"),Object(d.b)("p",null,"Grunds\xe4tzlich ist es bei einem ",Object(d.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/arduino/array"}),"Array")," egal, von welchen Datentyp die Elemente sind (solange alle den selben Datentyp haben). Deshalb kann auch ein Array aus ",Object(d.b)("em",{parentName:"p"},"LED-Objekten")," erzeugt werden."),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"Led ledListe[4];                                 // Array mit Led-Objekten (Array von Datentyp `Led`)\nledListe = {Led(3), Led(6), Led(9), Led(10)};    // Array Zuweisung (und Initialisierung)\n")),Object(d.b)("pre",null,Object(d.b)("code",Object(i.a)({parentName:"pre"},{}),"Led ledListe[] = {Led(3), Led(6), Led(9), Led(10)}; \n")),Object(d.b)("h2",{id:"links"},"Links"),Object(d.b)("ul",null,Object(d.b)("li",{parentName:"ul"},Object(d.b)("a",Object(i.a)({parentName:"li"},{href:"https://paulmurraycbr.github.io/ArduinoTheOOWay.html"}),"Arduino the Object Oriented Way")),Object(d.b)("li",{parentName:"ul"},Object(d.b)("a",Object(i.a)({parentName:"li"},{href:"https://learn.adafruit.com/multi-tasking-the-arduino-part-1/a-classy-solution"}),"A Classy Solution - Adafruit")),Object(d.b)("li",{parentName:"ul"},Object(d.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=S_uaROFnWSg"}),"Tutorial: Object Oriented Programming with the Arduino"))))}k.isMDXComponent=!0},133:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return m}));var i=t(0),r=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),o=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},c=function(e){var n=o(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),c=o(t),p=i,m=c["".concat(l,".").concat(p)]||c[p]||u[p]||a;return t?r.a.createElement(m,d(d({ref:n},b),{},{components:t})):r.a.createElement(m,d({ref:n},b))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var b=2;b<a;b++)l[b]=t[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},134:function(e,n,t){"use strict";function i(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=i(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=i(e))&&(r&&(r+=" "),r+=n);return r}},146:function(e,n,t){"use strict";var i=t(0),r=t(147);n.a=function(){var e=Object(i.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},147:function(e,n,t){"use strict";var i=t(0),r=Object(i.createContext)(void 0);n.a=r},192:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/files/blink-0825f200ea2d7a7b2fcefc1c597e00db.zip"}}]);