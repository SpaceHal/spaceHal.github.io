(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{131:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),b=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=b(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(t),p=r,m=d["".concat(o,".").concat(p)]||d[p]||u[p]||a;return t?i.a.createElement(m,l(l({ref:n},s),{},{components:t})):i.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},90:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var r=t(3),i=t(7),a=(t(0),t(131)),o={title:"Mit Objektorientierung zum Multitasking",sidebar_label:"2. Objektorientierung",description:"Multitasking beim Arduino mit objektorientierter Programmierung realisieren."},l={unversionedId:"arduino/objectOriented",id:"arduino/objectOriented",isDocsHomePage:!1,title:"Mit Objektorientierung zum Multitasking",description:"Multitasking beim Arduino mit objektorientierter Programmierung realisieren.",source:"@site/docs/arduino/objectOriented.md",slug:"/arduino/objectOriented",permalink:"/docs/arduino/objectOriented",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/arduino/objectOriented.md",version:"current",sidebar_label:"2. Objektorientierung",sidebar:"someSidebar",previous:{title:"Eine Men\xfcsteuerung mit zwei Tastern und drei LEDs",permalink:"/docs/arduino/simpleMenu"},next:{title:"Eine sehr kurz Geschichte des Elektromotors",permalink:"/docs/motor/wieEsBegann"}},c=[{value:"Objektorientierte Programmierung",id:"objektorientierte-programmierung",children:[{value:"Beispiel einer LED-Klasse",id:"beispiel-einer-led-klasse",children:[]},{value:"<code>class Led { ... }</code>",id:"class-led---",children:[]},{value:"<code>public:</code>",id:"public",children:[]},{value:"<code>Led(int pinLED) { ... }</code>",id:"ledint-pinled---",children:[]},{value:"<code>meineLED.turnOn()</code>",id:"meineledturnon",children:[]}]},{value:"Links",id:"links",children:[]}],s={rightToc:c};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"objektorientierte-programmierung"},"Objektorientierte Programmierung"),Object(a.b)("p",null,"Klassen und Objekte stellen eine Weiterentwicklung des Konzeptes von Variablen und Funktionen dar. W\xe4hrend eine Variable nur einen Wert (oder als Array auch mehrere Werte) besitzen kann, so kann ein Objekt zus\xe4tzlich auch Methoden ",Object(a.b)("em",{parentName:"p"},"besitzen"),". Dies erm\xf6glicht es, einen gut lesbaren und flexibel einsetzbaren Code zu schreiben. Stehen bei Variablen vordefinierten Variablentypen (",Object(a.b)("inlineCode",{parentName:"p"},"int"),", ",Object(a.b)("inlineCode",{parentName:"p"},"float"),", ",Object(a.b)("inlineCode",{parentName:"p"},"char"),", ...) zur Verf\xfcgung, so ist es bei Objekten notwendig den Objekttyp selbst als eine Art Bauplan f\xfcr das Objekt zu programmieren."),Object(a.b)("p",null,"Bei objektorientierter Programmierung spricht man anstatt von einem ",Object(a.b)("strong",{parentName:"p"},"Objekttyp")," von einer ",Object(a.b)("strong",{parentName:"p"},"Klasse"),". "),Object(a.b)("img",{src:"/img/arduino/ObjektKlassse.png",alt:"Klasse und Objekt",width:"400px",class:"center"}),Object(a.b)("h3",{id:"beispiel-einer-led-klasse"},"Beispiel einer LED-Klasse"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-arduino"}),"#define LED_PIN 13\n\nclass Led {\n    // Attribute (Eigenschaften) der Klasse\n    int pin;       // LED-Pin\n    int statusLED; // Status der LED (1,0)\n\n    // alle Methoden (oder Attribute) nach public: sind \xf6ffentlich\n  public:\n    Led(int pinLED) { // Konstruktor (ohne void oder int, etc.)\n      pin = pinLED;\n      pinMode(pin, OUTPUT);\n    }\n    void schalteLedAn() {\n      statusLED = HIGH;\n      digitalWrite(pin, statusLED);\n    }\n    void schalteLedAus() {\n      statusLED = LOW;\n      digitalWrite(pin, statusLED);\n    }\n}; // Eine Klasse endet mit einem Semikolon\n\nLed meineLED(LED_PIN); // LED Objekt wird initialisiert\n\nvoid setup() {\n  // bleibt leer :-)\n}\n\nvoid loop() {\n  meineLED.schalteLedAn();  // Methodenaufruf vom Objekt meineLED\n  delay(500);\n  meineLED.schalteLedAus();\n  delay(500);\n}\n")),Object(a.b)("h3",{id:"class-led---"},Object(a.b)("inlineCode",{parentName:"h3"},"class Led { ... }")),Object(a.b)("p",null,"Das Schl\xfcsselwort ",Object(a.b)("inlineCode",{parentName:"p"},"class")," gibt an, dass eine Beschreibung f\xfcr die Klasse ",Object(a.b)("inlineCode",{parentName:"p"},"Led")," folgt. Der gesamte Code f\xfcr die Klasse steht in ",Object(a.b)("inlineCode",{parentName:"p"},"{ }")," Klammern und endet mit einem Semikolon ",Object(a.b)("inlineCode",{parentName:"p"},";")," hinter der letzten ",Object(a.b)("inlineCode",{parentName:"p"},"}")," Klammer."),Object(a.b)("h3",{id:"public"},Object(a.b)("inlineCode",{parentName:"h3"},"public:")),Object(a.b)("p",null,"Alle nach dem Schl\xfcsselwort ",Object(a.b)("inlineCode",{parentName:"p"},"public:")," folgenden Attribute (Variablen) und Methoden sind auch von au\xdferhalb des sp\xe4ter erzeugten Objektes zug\xe4nglich (z.B. ",Object(a.b)("inlineCode",{parentName:"p"},"meineLED.turnOn()"),"). Es sollte vermieden werden, einfache Attribute (Variablen) ",Object(a.b)("inlineCode",{parentName:"p"},"public")," zu setzen."),Object(a.b)("h3",{id:"ledint-pinled---"},Object(a.b)("inlineCode",{parentName:"h3"},"Led(int pinLED) { ... }")),Object(a.b)("p",null,"Der ",Object(a.b)("strong",{parentName:"p"},"Konstruktor")," ist eine spezielle Methode, welche einmalig beim Erzeugen eines Objektes (z.B. ",Object(a.b)("inlineCode",{parentName:"p"},"Led meineLED(LED_PIN)"),") aufgerufen wird. Durch den Konstruktor werden den Attributen (Variablen) der Klasse Werte zugewiesen. In unserem Beispiel wird der Wert des LED-Pins \xfcbergeben."),Object(a.b)("h3",{id:"meineledturnon"},Object(a.b)("inlineCode",{parentName:"h3"},"meineLED.turnOn()")),Object(a.b)("p",null,"Zum Aufrufen einer Methode des erzeugten Objektes, wird der Methodenname durch einen Punkt ",Object(a.b)("inlineCode",{parentName:"p"},".")," mit dem Objektnamen verkn\xfcpft."),Object(a.b)("h2",{id:"links"},"Links"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://paulmurraycbr.github.io/ArduinoTheOOWay.html"}),"Arduino the Object Oriented Way")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://learn.adafruit.com/multi-tasking-the-arduino-part-1/a-classy-solution"}),"A Classy Solution - Adafruit")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=S_uaROFnWSg"}),"Tutorial: Object Oriented Programming with the Arduino"))))}b.isMDXComponent=!0}}]);