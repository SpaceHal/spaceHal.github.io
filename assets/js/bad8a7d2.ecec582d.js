"use strict";(self.webpackChunkspace_hal=self.webpackChunkspace_hal||[]).push([[4798],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,b=c["".concat(u,".").concat(m)]||c[m]||p[m]||l;return n?r.createElement(b,o(o({ref:t},d),{},{components:n})):r.createElement(b,o({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(6010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>T});var r=n(7462),a=n(7294),l=n(6010),o=n(2466),i=n(6550),u=n(1980),s=n(7392),d=n(12);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=p(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[u,s]=b({queryString:n,groupId:r}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,d.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),h=(()=>{const e=u??c;return m({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),g(e)}),[s,g,l]),tabValues:l}}var h=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),r=s[n].value;r!==i&&(c(t),u(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function w(e){const t=g(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",f.tabList)},a.createElement(k,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function T(e){const t=(0,h.Z)();return a.createElement(w,(0,r.Z)({key:String(t)},e))}},2417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>b,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),l=n(4866),o=n(5162);const i={title:"Die Taster",sidebar_label:"Taster",description:"Die Taster am Zumo 32u4 verwenden.",custom_edit_url:null},u=void 0,s={unversionedId:"zumo32u4/buttons",id:"zumo32u4/buttons",title:"Die Taster",description:"Die Taster am Zumo 32u4 verwenden.",source:"@site/docs/zumo32u4/buttons.md",sourceDirName:"zumo32u4",slug:"/zumo32u4/buttons",permalink:"/docs/zumo32u4/buttons",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{title:"Die Taster",sidebar_label:"Taster",description:"Die Taster am Zumo 32u4 verwenden.",custom_edit_url:null},sidebar:"mySidebar",previous:{title:"Batteriespannung",permalink:"/docs/zumo32u4/power"},next:{title:"Motoren",permalink:"/docs/zumo32u4/motors"}},d={},c=[{value:"<code>bool isPressed ()</code>",id:"bool-ispressed-",level:2},{value:"Beispielprogramm",id:"beispielprogramm",level:4},{value:"<code>void waitForPress ()</code>",id:"void-waitforpress-",level:2},{value:"<code>void waitForRelease ()</code>",id:"void-waitforrelease-",level:2},{value:"<code>void waitForButton ()</code>",id:"void-waitforbutton-",level:2},{value:"Beispielprogramm",id:"beispielprogramm-1",level:4},{value:"<code>bool getSingleDebouncedPress ()</code>",id:"bool-getsingledebouncedpress-",level:2},{value:"Beispielprogramm",id:"beispielprogramm-2",level:4},{value:"<code>bool getSingleDebouncedRelease ()</code>",id:"bool-getsingledebouncedrelease-",level:2}],p={toc:c},m="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bibliotheken des Herstellers Pololu")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"3pi+")," 32u4: ",(0,a.kt)("a",{parentName:"li",href:"https://pololu.github.io/pololu-3pi-plus-32u4-arduino-library/class_pololu3pi_plus32_u4_1_1_button_a.html"},"Taster")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Zumo")," 32u4: ",(0,a.kt)("a",{parentName:"li",href:"https://pololu.github.io/zumo-32u4-arduino-library/class_zumo32_u4_button_a.html"},"Taster"))),(0,a.kt)("p",null,"F\xfcr das einfache Auslesen der drei Taster A,B und C k\xf6nnen die folgenden drei Klassen verwendet werden:"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"3pi+",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#include <Pololu3piPlus32U4.h>\nusing namespace Pololu3piPlus32U4;\n\n// Mit den Taster-Klassen werden Taster-Objekte erzeugt ..\nButtonA buttonA; \nButtonB buttonB;\nButtonC buttonC;\n"))),(0,a.kt)(o.Z,{value:"Zumo",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#include <Zumo32U4.h>  \n\n// Mit den Taster-Klassen werden Taster-Objekte erzeugt ..\nZumo32U4ButtonA buttonA; \nZumo32U4ButtonB buttonB;\nZumo32U4ButtonC buttonC;\n")))),(0,a.kt)("p",null," F\xfcr jeden Taster gibt es verschieden Methoden, welche zum Beispiel "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\xfcberpr\xfcfen, ob ein Taster ",(0,a.kt)("a",{parentName:"li",href:"#bool-isPressed"},"gedr\xfcckt")," ist, "),(0,a.kt)("li",{parentName:"ul"},"die den Programmablauf unterbrechen, bis ein Taster ",(0,a.kt)("a",{parentName:"li",href:"#void-waitForPress"},"gedr\xfcckt oder losgelassen")," wurde oder "),(0,a.kt)("li",{parentName:"ul"},"die das Dr\xfccken eines Tasters ",(0,a.kt)("a",{parentName:"li",href:"#bool-getSingleDebouncedPress"},"entprellen"),".")),(0,a.kt)("h2",{id:"bool-ispressed-"},(0,a.kt)("inlineCode",{parentName:"h2"},"bool isPressed ()")),(0,a.kt)("p",null,"Gibt ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," oder 1 zur\xfcck, wenn der entsprechende Taster gedr\xfcckt ist und ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," oder 0 wenn nicht. Der Taster wird nicht entprellt."),(0,a.kt)("h4",{id:"beispielprogramm"},"Beispielprogramm"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"3pi+",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},"#include <Pololu3piPlus32U4.h>\nusing namespace Pololu3piPlus32U4;\n\nButtonB buttonB;\n\nvoid setup()\n{ /* leer */}\n\nvoid loop()\n{\n  // `isPressed()` liest direkt, ohne zu entprellen\n  if (buttonB.isPressed()) // Wenn gedr\xfcckt ...\n  {\n    ledYellow(1);\n  }\n  else\n  {\n    ledYellow(0);\n  }\n}   \n"))),(0,a.kt)(o.Z,{value:"Zumo",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},"#include <Zumo32U4.h>\n\nZumo32U4ButtonB buttonB;\n\nvoid setup()\n{ /* leer */}\n\nvoid loop()\n{\n  // `isPressed()` liest direkt, ohne zu entprellen\n  if (buttonB.isPressed()) // Wenn gedr\xfcckt ...\n  {\n    ledYellow(1);\n  }\n  else\n  {\n    ledYellow(0);\n  }\n}   \n")))),(0,a.kt)("h2",{id:"void-waitforpress-"},(0,a.kt)("inlineCode",{parentName:"h2"},"void waitForPress ()")),(0,a.kt)("p",null,"Wartet bis der Taster gedr\xfcckt wurde. Ber\xfccksichtigt das Prellen der Taster."),(0,a.kt)("h2",{id:"void-waitforrelease-"},(0,a.kt)("inlineCode",{parentName:"h2"},"void waitForRelease ()")),(0,a.kt)("p",null,"Wartet bis der Taster losgelassen wurde. Ber\xfccksichtigt das Prellen der Taster."),(0,a.kt)("h2",{id:"void-waitforbutton-"},(0,a.kt)("inlineCode",{parentName:"h2"},"void waitForButton ()")),(0,a.kt)("p",null,"Wartet bis der Taster gedr\xfcckt und anschlie\xdfend losgelassen wurde. Ber\xfccksichtigt das Prellen der Taster."),(0,a.kt)("h4",{id:"beispielprogramm-1"},"Beispielprogramm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},'#include <Zumo32U4.h>\n\nZumo32U4ButtonA buttonA;\nZumo32U4LCD lcd;\n\nvoid setup()\n{\n  lcd.clear();\n  lcd.print(F("Press A"));\n\n  /* Die Methode waitForButton() stoppt das Programm, bis \n     der Taster gedr\xfcckt und anschlie\xdfend losgelassen wurde.\n     Die Methode entprellt den Taster.*/\n  buttonA.waitForButton();\n\n  lcd.clear();\n  lcd.print(F("Danke"));\n}\n\nvoid loop(){\n  // ohne Inhalt\n}\n')),(0,a.kt)("h2",{id:"bool-getsingledebouncedpress-"},(0,a.kt)("inlineCode",{parentName:"h2"},"bool getSingleDebouncedPress ()")),(0,a.kt)("p",null,"Gibt immer dann  ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," oder ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," zur\xfcck, wenn der Taster vom nicht gedr\xfcckten zum gedr\xfcckten Zustand gewechselt hat. Die Methode wird mit einem Zustandsdiagramm (",(0,a.kt)("em",{parentName:"p"},"state machine"),") realisiert und muss wiederkehrend aufgerufen werden. Bei jedem Aufruf wird unter Ber\xfccksichtigung des Prellens der Status des Tasters aktualisiert."),(0,a.kt)("h4",{id:"beispielprogramm-2"},"Beispielprogramm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},'#include <Zumo32U4.h>\n\nZumo32U4ButtonC buttonC;\nZumo32U4LCD lcd;\n\nint cPressedCount = 0;\n\nvoid setup()\n{\n  // ohne Inhalt\n}\n\nvoid loop()\n{\n  /* Wird die Methode getSingleDebouncedPress() regelm\xe4\xdfig in einer Schleife aufgerufen,\n   * so gibt sie true zur\xfcck, wenn der Taster gedr\xfcckt und false zur\xfcck, wenn der Taster \n   * nicht gedr\xfcckt ist. Die Methode ist nicht blockierend und entprellt den Taster*/\n  if (buttonC.getSingleDebouncedPress())\n  {\n    cPressedCount += 1;\n    Serial.print(F("Button C was pressed "));\n    Serial.print(cPressedCount);\n    Serial.println(F(" times."));\n\n    lcd.clear();\n    lcd.print(cPressedCount);\n  }\n\n  /* Wenn nicht blockierende Methoden wie isPressed() oder\n   * getSingleDebouncedPress() verwendet werden, k\xf6nnen mehrere Taster zu gleichen\n   * Zeit verwendet werden und au\xdferdem noch andere Aufgaben zu gleichen Zeit\n   * ausgef\xfchrt werden. In diesem Beispiel blinkt die rote LED, w\xe4hrend der Taster C\n   * regelm\xe4\xdfig abgefragt wird. */\n  ledRed(millis() % 1024 < 100); // Hackerstyle zum Blinken der LED\n}   \n')),(0,a.kt)("h2",{id:"bool-getsingledebouncedrelease-"},(0,a.kt)("inlineCode",{parentName:"h2"},"bool getSingleDebouncedRelease ()")),(0,a.kt)("p",null,"Gibt immer dann  ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," oder ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," zur\xfcck, wenn der Taster vom  gedr\xfcckten zum nicht gedr\xfcckten Zustand gewechselt hat. Die Methode wird mit einem Zustandsdiagramm (",(0,a.kt)("em",{parentName:"p"},"state machine"),") realisiert und muss wiederkehrend aufgerufen werden. Bei jedem Aufruf wird unter Ber\xfccksichtigung des Prellens der Status des Tasters aktualisiert."))}b.isMDXComponent=!0}}]);