(self.webpackChunkspace_hal_2=self.webpackChunkspace_hal_2||[]).push([[2070],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(t),p=i,g=m["".concat(l,".").concat(p)]||m[p]||c[p]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6946:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o={title:"Getting Started - Motoren und Taster",sidebar_label:"Getting Started",description:"Schnelleinstieg f\xfcr den Zumo 32u4. Motoren, Taster und Display in Betrieb nehmen."},s={unversionedId:"zumo32u4/gettingStarted",id:"zumo32u4/gettingStarted",isDocsHomePage:!1,title:"Getting Started - Motoren und Taster",description:"Schnelleinstieg f\xfcr den Zumo 32u4. Motoren, Taster und Display in Betrieb nehmen.",source:"@site/docs/zumo32u4/gettingStarted.md",sourceDirName:"zumo32u4",slug:"/zumo32u4/gettingStarted",permalink:"/docs/zumo32u4/gettingStarted",editUrl:"https://spacehal.github.io/docs/zumo32u4/gettingStarted.md",version:"current",sidebar_label:"Getting Started",frontMatter:{title:"Getting Started - Motoren und Taster",sidebar_label:"Getting Started",description:"Schnelleinstieg f\xfcr den Zumo 32u4. Motoren, Taster und Display in Betrieb nehmen."},sidebar:"sideBarZumo",previous:{title:"Installation",permalink:"/docs/zumo32u4/installation"},next:{title:"LEDs",permalink:"/docs/zumo32u4/zumoBasics"}},l=[{value:"Schnelleinstieg",id:"schnelleinstieg",children:[]},{value:"LEDs",id:"leds",children:[]},{value:"Taster",id:"taster",children:[]},{value:"Motoren",id:"motoren",children:[]},{value:"LCD Display",id:"lcd-display",children:[]},{value:"Aufgaben",id:"aufgaben",children:[]}],d={toc:l};function u(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Nachdem der Treiber und die Bibliothek installiert worden sind, kann der Zumo programmiert werden. Da der Zumo auch mit Arduino programmiert wird, ist der Einstieg nicht besonders schwer. Allerdings gibt es einige neue Befehle, welche zur Steuerung des Roboters notwendig sind. In der vereinfachten ",(0,a.kt)("a",{parentName:"p",href:"/docs/zumo32u4/zumoBasics"},"Befehlsreferenz")," finden Sie ein \xdcbersicht der wichtigsten Befehle. Schauen Sie sich die Referenz immer mal wieder an, um sich mit den Programmierm\xf6glichkeiten des Zumos vertraut zu machen."),(0,a.kt)("h2",{id:"schnelleinstieg"},"Schnelleinstieg"),(0,a.kt)("p",null,"F\xfcr einen schnellen Einstig und als guten \xdcberblick \xfcber die Grundfunktionen lernen Sie im folgenden Beispiel Methoden zum Steuern der"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Motoren"),(0,a.kt)("li",{parentName:"ul"},"LEDs und"),(0,a.kt)("li",{parentName:"ul"},"Taster")),(0,a.kt)("p",null,"kennen. Nach diesem Schnelleinstieg sollten Sie mithilfe der ",(0,a.kt)("a",{parentName:"p",href:"/docs/zumo32u4/zumoBasics"},"Befehlsreferenz")," in der Lage sein auch Sensoren (Bodensensor, Hindernisssensor) in Ihr Programm einzubinden. Erl\xe4uterungen finden Sie als Kommentar im Code oder etwas ausf\xfchrlicher weiter unten."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},'/*\n   Einfaches Beispiel als Schnelleinstieg in die Programmierung des Zumo. Nach dem Starten\n   wird der Roboter verschieden Aktionen ausf\xfchren. Die Auswahl der Aktion geschieht\n   durch das Dr\xfccken einer der drei Tasten.\n*/\n\n#include <Zumo32U4.h>    // Die Bibliothek sollte immer als erstes eingebunden werden\n\n// F\xfcr fast jedes Bauteil (Taster, Motoren, Display, Sensoren) wird in der Zumo-Bibliothek\n// eine eigene Klasse mit Methoden zum Konfigurieren, Steuern und Auslesen zur Verf\xfcgung\n// gestellt.\nZumo32U4LCD lcd;          // Display (8x2)\nZumo32U4ButtonA buttonA;  // Taster A\nZumo32U4ButtonB buttonB;  // Taster B\nZumo32U4ButtonC buttonC;  // Taster C\nZumo32U4Motors motors;    // Motoren\n\n\n// Die Motorgeschwindigkeit kann Werte zwischen -400 ... 400 annehmen\nint leftSpeed = 200;\nint rightSpeed = 200;\n\nvoid setup() {\n  lcd.clear();             // Display l\xf6schen\n  lcd.print(F("Press A")); // Textausgabe\n  buttonA.waitForButton(); // Programm pausiert, bis Taster A gedr\xfcckt wurde\n  lcd.clear();\n  lcd.print(F("A  B  C"));\n}\n\nvoid loop() {\n\n  // 2 Sekunden geradeaus fahren.\n  if ( buttonA.isPressed() ) {   // Abfrage, ob Taster gedr\xfcckt wurde\n    ledYellow(1);                // Gelb LED einschalten\n    delay(500);                  // 0,5 Sekunden warten\n    motors.setSpeeds(leftSpeed, rightSpeed); // Motorgeschwindigkeit setzen\n    delay(2000);\n    motors.setSpeeds(0, 0);\n    ledYellow(0);                // Gelbe LED ausschalten\n  }\n\n  // Langsames Beschleunigen und Abbremsen.\n  if (buttonB.isPressed()) {\n    ledGreen(1);\n    delay(500);\n    // Beschleunigen\n    for (int speed = 0; speed < 401; speed++)\n    {\n      motors.setSpeeds(speed, speed);\n      delay(6);\n    }\n    // Abbremsen\n    for (int speed = 400; speed > 0; speed--)\n    {\n      motors.setSpeeds(speed, speed);\n      delay(6);\n    }\n    ledGreen(0);\n  }\n\n  // Ein Viereck fahren.\n  if (buttonC.isPressed()) {\n    ledRed(1);\n    delay(500);\n    /*\n      Eigenen Code einf\xfcgen ...\n    */\n    ledRed(0);\n  }\n}\n')),(0,a.kt)("h2",{id:"leds"},"LEDs"),(0,a.kt)("p",null,"Die ",(0,a.kt)("a",{parentName:"p",href:"/docs/zumo32u4/zumoBasics"},"LEDs")," ben\xf6tigen keine speziellen Objekte zur Ansteuerung. F\xfcr jede LED steht ein eigene Funktion ",(0,a.kt)("inlineCode",{parentName:"p"},"ledRed()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ledYellow"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ledGreen")," zur Verf\xfcgung, welche als Argument ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," (aus) oder ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," (an) akzeptieren."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},"ledYellow(1);  // schaltet die gelbe LED an\nledYellow(0);  // schaltet die gelbe LED aus\n")),(0,a.kt)("h2",{id:"taster"},"Taster"),(0,a.kt)("p",null,"F\xfcr die Nutzung der ",(0,a.kt)("a",{parentName:"p",href:"/docs/zumo32u4/buttons"},"Taster")," werden drei Klassen (",(0,a.kt)("inlineCode",{parentName:"p"},"Zumo32U4ButtonA"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Zumo32U4ButtonB")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"Zumo32U4ButtonC"),") bereitgestellt. Nach dem Erzeugen der entsprechenden Objekte "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Arduino"},"Zumo32U4ButtonA buttonA;  // Taster A\n")),(0,a.kt)("p",null,"stehen verschieden Methoden zum Auslesen der Taster bereit. Mit der Zeile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Arduino"},"buttonA.waitForButton(); // Programm pausiert, bis Taster A gedr\xfcckt wurde\n")),(0,a.kt)("p",null,"wird die Programmausf\xfchrung solange pausiert, bis der Taster A gedr\xfcckt wurde."),(0,a.kt)("p",null,"Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"isPressed()")," gibt ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," zur\xfcck, wenn der Taster gedr\xfcckt ist, ansonsten ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),". Diese Methode ist nicht entprellt. Die Methode eignet sich besonders um in Anbh\xe4ngigkeit der Taster Aktionen ausf\xfchren zu lassen. Hierf\xfcr wird die Methode mit eine ",(0,a.kt)("inlineCode",{parentName:"p"},"if-else")," Verzweigung kombibiert."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-arduino"},"if ( buttonA.isPressed() ){\n  // tue etwas ...\n}\n")),(0,a.kt)("h2",{id:"motoren"},"Motoren"),(0,a.kt)("p",null,"F\xfcr die ",(0,a.kt)("a",{parentName:"p",href:"/docs/zumo32u4/motors"},"Motoren")," steht die Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Zumo32U4Motors")," zur Verf\xfcgung. Die wichtigste Methode zum Steuern der beiden Motoren ist ",(0,a.kt)("inlineCode",{parentName:"p"},"setSpeeds(int left, int right)"),". Die Argument geben jeweils die Drehgeschwindigkeit der beiden Motoren an. Die erlaubten Werte liegen im Bereich von -400 bis 400."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Arduino"},"motors.setSpeeds(-300, 300); // auf der Stelle rotieren\n")),(0,a.kt)("h2",{id:"lcd-display"},"LCD Display"),(0,a.kt)("h2",{id:"aufgaben"},"Aufgaben"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),(0,a.kt)("strong",{parentName:"h5"},"\xdcben"))),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol"},"Erweitern Sie das obige Programm so, dass Ihr Roboter ein m\xf6glichst exaktes ",(0,a.kt)("strong",{parentName:"li"},"Viereck")," f\xe4hrt."),(0,a.kt)("li",{parentName:"ol"},"Schreiben Sei eine Funktion ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"void drehen(in grad)")),", welche den Roboter um die angegebene Gradzahl drehen l\xe4sst. Beachten Sie, dass ein negativer Winkel eine Drehung nach rechts verursacht.")))))}u.isMDXComponent=!0}}]);