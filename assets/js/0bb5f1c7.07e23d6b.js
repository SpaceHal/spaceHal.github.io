"use strict";(self.webpackChunkspace_hal_2=self.webpackChunkspace_hal_2||[]).push([[5616],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return p}});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=t.createContext({}),u=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(r),p=i,g=m["".concat(d,".").concat(p)]||m[p]||s[p]||o;return r?t.createElement(g,a(a({ref:n},c),{},{components:r})):t.createElement(g,a({ref:n},c))}));function p(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8273:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var t=r(3117),i=r(102),o=(r(7294),r(3905)),a=["components"],l={title:"Inertiale Messeinheit - Gyroskop, Beschleunigungssensor und Magnetometer",sidebar_label:"Inertiale Messeinheit",custom_edit_url:null},d=void 0,u={unversionedId:"zumo32u4/gyroscope",id:"zumo32u4/gyroscope",isDocsHomePage:!1,title:"Inertiale Messeinheit - Gyroskop, Beschleunigungssensor und Magnetometer",description:"Pololu Zumo 32u4 Library: Inertiale Messeinheit",source:"@site/docs/zumo32u4/gyroscope.md",sourceDirName:"zumo32u4",slug:"/zumo32u4/gyroscope",permalink:"/docs/zumo32u4/gyroscope",editUrl:null,tags:[],version:"current",frontMatter:{title:"Inertiale Messeinheit - Gyroskop, Beschleunigungssensor und Magnetometer",sidebar_label:"Inertiale Messeinheit",custom_edit_url:null},sidebar:"sideBarZumo",previous:{title:"Radencoder",permalink:"/docs/zumo32u4/encode"}},c=[{value:"Sensortyp ermitteln",id:"sensortyp-ermitteln",children:[],level:2},{value:"<code>enableDefault()</code>",id:"enabledefault",children:[],level:2},{value:"<code>configureForTurnSensing()</code>",id:"configureforturnsensing",children:[],level:2},{value:"<code>configureForBalancing()</code>",id:"configureforbalancing",children:[],level:2},{value:"<code>configureForFaceUphill()</code>",id:"configureforfaceuphill",children:[],level:2},{value:"<code>void readAcc()</code>",id:"void-readacc",children:[],level:2},{value:"<code>void readGyro()</code>",id:"void-readgyro",children:[],level:2},{value:"<code>void readMag()</code>",id:"void-readmag",children:[],level:2},{value:"<code>void read()</code>",id:"void-read",children:[],level:2},{value:"<code>bool accDataReady()</code>",id:"bool-accdataready",children:[],level:2},{value:"<code>bool gyroDataReady()</code>",id:"bool-gyrodataready",children:[],level:2},{value:"<code>bool magDataReady()</code>",id:"bool-magdataready",children:[],level:2},{value:"Drehwinkel mit Gyroskop bestimmen",id:"drehwinkel-mit-gyroskop-bestimmen",children:[],level:2}],s={toc:c};function m(e){var n=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Pololu Zumo 32u4 Library: ",(0,o.kt)("a",{parentName:"em",href:"https://pololu.github.io/zumo-32u4-arduino-library/class_zumo32_u4_i_m_u.html"},"Inertiale Messeinheit"))),(0,o.kt)("h2",{id:"sensortyp-ermitteln"},"Sensortyp ermitteln"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Zumo32U4IMU imu;                  // Objekt f\xfcr die Inertialsensoren\n\nZumo32U4IMUType imuType;\n\nimuType = imu.getType();\nSerial.println("IMU Type:");\nswitch (imuType) {\ncase Zumo32U4IMUType::LSM303D_L3GD20H:\n    Serial.println("LSM303D L3GD20H");\n    break;\ncase Zumo32U4IMUType::LSM6DS33_LIS3MDL:\n    Serial.println("LSM6DS33 LIS3MDL");\n    break;\ncase Zumo32U4IMUType::Unknown:\n    Serial.println("Unknown");\n    break;\n}\n')),(0,o.kt)("h2",{id:"enabledefault"},(0,o.kt)("inlineCode",{parentName:"h2"},"enableDefault()")),(0,o.kt)("h2",{id:"configureforturnsensing"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureForTurnSensing()")),(0,o.kt)("h2",{id:"configureforbalancing"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureForBalancing()")),(0,o.kt)("h2",{id:"configureforfaceuphill"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureForFaceUphill()")),(0,o.kt)("h2",{id:"void-readacc"},(0,o.kt)("inlineCode",{parentName:"h2"},"void readAcc()")),(0,o.kt)("h2",{id:"void-readgyro"},(0,o.kt)("inlineCode",{parentName:"h2"},"void readGyro()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Zumo32U4IMU imu;          // Objekt f\xfcr die Inertialsensoren\n\nimu.readGyro();           // Auslesen der Gyroscopedaten (Zugriff auf Daten \xfcber das Objekt)\nint x = imu.g.z;          // Zugriff auf Gyro-Daten in x-Richtung\nint y = imu.g.z;          // Zugriff auf Gyro-Daten in y-Richtung\nint z = imu.g.z;          // Zugriff auf Gyro-Daten in z-Richtung (Drehung in der xy-Ebene)\n\n")),(0,o.kt)("h2",{id:"void-readmag"},(0,o.kt)("inlineCode",{parentName:"h2"},"void readMag()")),(0,o.kt)("h2",{id:"void-read"},(0,o.kt)("inlineCode",{parentName:"h2"},"void read()")),(0,o.kt)("h2",{id:"bool-accdataready"},(0,o.kt)("inlineCode",{parentName:"h2"},"bool accDataReady()")),(0,o.kt)("h2",{id:"bool-gyrodataready"},(0,o.kt)("inlineCode",{parentName:"h2"},"bool gyroDataReady()")),(0,o.kt)("p",null,"Gibt ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," zur\xfcck, wenn das Gyroskop seit dem letzten Auslesen der Daten neu Daten hat."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Zumo32U4IMU imu;                  // Objekt f\xfcr die Inertialsensoren\n\nwhile (!imu.gyroDataReady()) {}   // Warten auf neue Gyro-Daten\n")),(0,o.kt)("h2",{id:"bool-magdataready"},(0,o.kt)("inlineCode",{parentName:"h2"},"bool magDataReady()")),(0,o.kt)("h2",{id:"drehwinkel-mit-gyroskop-bestimmen"},"Drehwinkel mit Gyroskop bestimmen"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'/* Das Beispielprogramm liest die Rohdaten des Gyroskops vom Zumo 32u4 \xfcber die I2C Schnittstelle \n    ein und gibt den Drehwinkel auf dem LCD-Display aus. Der verwendete Sensor ist der L3GD20H oder\n    der LSM6DS33 von STMicroeletronics.\n*/\n\n#include <Wire.h>                 // I2C Bibliothek\n#include <Zumo32U4.h>\n\nZumo32U4IMU imu;                  // Objekt f\xfcr Inertialsensoren\nZumo32U4LCD lcd;\n\nunsigned long lastTime = 0;       // Display Update-Zeit\nunsigned long gyroLastUpdate = 0; // Zeitdifferenz zwischen Gyro-Messung\nfloat offSet = 0;                 // Offset-Fehler in mdps/digit (milli degree per second/digit)\nfloat winkel  = 0;                // Einheit: deg (Gradma\xdf 0 ... 360\xb0)\n\nvoid setup(){\n    Serial.begin(115200);\n\n    lcd.clear(); lcd.print("Gyro Cal");\n    lcd.gotoXY(0, 1); lcd.print("ibration");\n\n    Wire.begin();\n    imu.init();\n    imu.configureForTurnSensing();        // Empfindlichkeit und Filter einstellen\n\n    // Ermitteln des Offset-Fehlers des Gyroskops\n    float sumGyro = 0;\n    for (long i = 0 ; i < 2000; i++) {\n        while (!imu.gyroDataReady()) {}   // Warten auf neue Gyro-Daten\n        imu.readGyro();                   // Einlesen der Gyro-Daten\n        sumGyro += imu.g.z;               // imu.g.z: Winkelgeschwindigkeit der z-Achse in mdps/digit\n    }\n    offSet = sumGyro / 2000;              // Offset-Fehler berechnen\n\n    gyroLastUpdate = micros();\n    lcd.clear();  lcd.print("Winkel:");\n}\n\nvoid loop()\n{\n    unsigned long now = micros();         // Zeit in Mikrosekunden (\xb5s)\n    long dt = now - gyroLastUpdate;       // Zeitdifferenz in Mikrosekunden (\xb5s)\n    gyroLastUpdate = now;\n\n    float drehRate, deltaWinkel;\n    imu.readGyro();                       // Einlesen der Gyro-Daten\n    drehRate = (imu.g.z - offSet) * 0.07; // Winkelgeschwindigkeit umgerechnet in deg/s (Gradma\xdf/Sekunde)\n    deltaWinkel = drehRate * dt / 1e6;    // Winkel\xe4nderung pro Zeitintervall (dt in Sekunden umrechnen)\n    winkel += deltaWinkel;                // Drehwinkel als Summe aller Winkel\xe4nderung\n\n    if (millis() - lastTime > 200) {\n        lastTime = millis();\n        lcd.gotoXY(0, 1); lcd.print(winkel ); lcd.print("   ");\n    }\n}\n')))}m.isMDXComponent=!0}}]);