"use strict";(self.webpackChunkspace_hal=self.webpackChunkspace_hal||[]).push([[7471],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=i.createContext({}),s=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return i.createElement(u.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},y=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=s(t),y=l,f=p["".concat(u,".").concat(y)]||p[y]||c[y]||r;return t?i.createElement(f,o(o({ref:n},d),{},{components:t})):i.createElement(f,o({ref:n},d))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=y;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a[p]="string"==typeof e?e:l,o[1]=a;for(var s=2;s<r;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>s});var i=t(7462),l=(t(7294),t(3905));const r={title:"Das OLED-Display (3pi+ 32u4)",sidebar_label:"OLED-Display",custom_edit_url:null},o=void 0,a={unversionedId:"zumo32u4/OLEDdisplay",id:"zumo32u4/OLEDdisplay",title:"Das OLED-Display (3pi+ 32u4)",description:"Bibliotheken des Herstellers Pololu",source:"@site/docs/zumo32u4/OLEDdisplay.md",sourceDirName:"zumo32u4",slug:"/zumo32u4/OLEDdisplay",permalink:"/docs/zumo32u4/OLEDdisplay",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{title:"Das OLED-Display (3pi+ 32u4)",sidebar_label:"OLED-Display",custom_edit_url:null},sidebar:"mySidebar",previous:{title:"LCD-Display",permalink:"/docs/zumo32u4/display"},next:{title:"Liniensensoren",permalink:"/docs/zumo32u4/lineSensor"}},u={},s=[{value:"<code>void clear()</code>",id:"void-clear",level:2},{value:"<code>void print()</code>",id:"void-print",level:2},{value:"<code>void gotoXY(int x, int y)</code>",id:"void-gotoxyint-x-int-y",level:2},{value:"Beispiel",id:"beispiel",level:2},{value:"<code>setLayout8x2()</code>",id:"setlayout8x2",level:2},{value:"<code>setLayout11x4()</code>",id:"setlayout11x4",level:2},{value:"<code>setLayout21x8()</code>",id:"setlayout21x8",level:2},{value:"Beispiel Display-Layout",id:"beispiel-display-layout",level:2}],d={toc:s},p="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(p,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Bibliotheken des Herstellers Pololu")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"3pi+")," 32u4: ",(0,l.kt)("a",{parentName:"li",href:"https://pololu.github.io/pololu-3pi-plus-32u4-arduino-library/class_pololu3pi_plus32_u4_1_1_o_l_e_d.html"},"OLED Display"))),(0,l.kt)("p",null,"Mit der Klasse ",(0,l.kt)("inlineCode",{parentName:"p"},"OLED")," werden die Methoden f\xfcr das Display bereitgestellt. "),(0,l.kt)("h2",{id:"void-clear"},(0,l.kt)("inlineCode",{parentName:"h2"},"void clear()")),(0,l.kt)("p",null,"L\xf6scht den Displayinhalt und setzten den Cursor auf die erste Stelle in der ersten Zeile (0,0)."),(0,l.kt)("h2",{id:"void-print"},(0,l.kt)("inlineCode",{parentName:"h2"},"void print()")),(0,l.kt)("p",null,"Kann wie der Arduinobefehl ",(0,l.kt)("inlineCode",{parentName:"p"},"Serial.print()"),"verwendet werden. Kann Strings oder auch auch Integerwerte ausgeben.\nDer Befehl ",(0,l.kt)("inlineCode",{parentName:"p"},"println()")," steht f\xfcr das Display nicht zur Verf\xfcgung."),(0,l.kt)("h2",{id:"void-gotoxyint-x-int-y"},(0,l.kt)("inlineCode",{parentName:"h2"},"void gotoXY(int x, int y)")),(0,l.kt)("p",null,"Positioniert den Cursor entsprechend den angegeben X,Y-Koordinaten auf dem Display. Die Koordinaten (0,0) entsprechen dem ersten Zeichen in der ersten Zeile. Die Koordinaten (0,1) setzen den Cursor auf das erste Zeihen in der zweiten Zeile.\nBeim anschlie\xdfenden Aufruf von ",(0,l.kt)("inlineCode",{parentName:"p"},"print()")," wird der Inhalt an der aktuellen Cursorposition ausgegeben."),(0,l.kt)("h2",{id:"beispiel"},"Beispiel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-arduino",metastring:"{6,11-12,17-18}","{6,11-12,17-18}":!0},'// Einfaches Beispiel f\xfcr das OLED-Display des 3pi+ 32u4\n\n#include <Pololu3piPlus32U4.h>      // Bibliothek f\xfcr den 3pi+ \nusing namespace Pololu3piPlus32U4;  // Vereinfachter Zugriff auf die Bibliothek\n\nOLED oled;                // Objekt f\xfcr das OLED-Display\nint counter = 0;           \n\nvoid setup()\n{\n  oled.clear();           // l\xf6scht das Display und setzt den Cursor nach oben links (0,0)\n  oled.print("Zahl");     // gibt den Text "Zahl" aus \n}\n\nvoid loop()\n{\n  oled.gotoXY(0, 1);      // Setzt den Cursor (X,Y): 1. Stelle, 2. Zeile,\n  oled.print(counter);    // gibt den Wert der Variablen aus (der alte Text wird \xfcberschrieben)\n  counter++;\n  delay(100);\n}\n')),(0,l.kt)("h2",{id:"setlayout8x2"},(0,l.kt)("inlineCode",{parentName:"h2"},"setLayout8x2()")),(0,l.kt)("p",null,"Konfiguriert das OLED Display f\xfcr 8 Zeichen pro Zeile und 2 Zeilen."),(0,l.kt)("h2",{id:"setlayout11x4"},(0,l.kt)("inlineCode",{parentName:"h2"},"setLayout11x4()")),(0,l.kt)("p",null,"Konfiguriert das OLED Display f\xfcr 11 Zeichen pro Zeile und 4 Zeilen."),(0,l.kt)("h2",{id:"setlayout21x8"},(0,l.kt)("inlineCode",{parentName:"h2"},"setLayout21x8()")),(0,l.kt)("p",null,"Konfiguriert das OLED Display f\xfcr 21 Zeichen pro Zeile und 8 Zeilen."),(0,l.kt)("h2",{id:"beispiel-display-layout"},"Beispiel Display-Layout"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-arduino"},'/* Umschalten des Layouts beim OLED-Display */\n#include <Pololu3piPlus32U4.h>\nusing namespace Pololu3piPlus32U4;\n\nOLED oled;                  // Objekt f\xfcr das LCD-Display\nButtonA buttonA;            // Objekt f\xfcr den Taster A\n\nvoid setup(){ }\n\nvoid loop()\n{\n  // highlight-next-line\n  oled.setLayout8x2();      //  Umschalten auf 2 Zeilen, 8 Zeichen pro Zeile\n  oled.clear();\n  oled.print("8x2");\n  oled.gotoXY(0, 1); \n  oled.print("Taster A");       \n  buttonA.waitForButton();  // Warten auf Taster A.\n\n  // highlight-next-line\n  oled.setLayout11x4();     //  Umschalten auf 4 Zeilen, 11 Zeichen pro Zeile\n  oled.clear();\n  oled.print("11x4");    \n  oled.gotoXY(0, 3);        \n  oled.print("Taster A");\n  buttonA.waitForButton();  // Warten auf Taster A.\n\n  // highlight-next-line\n  oled.setLayout21x8();     // Umschalten auf 8 Zeilen, 21 Zeichen pro Zeile\n  oled.clear();\n  oled.print("Layout 21x8");\n  oled.gotoXY(0, 7);        \n  oled.print("Taster [A] druecken");\n  buttonA.waitForButton();  // Warten auf Taster A.\n}\n')))}c.isMDXComponent=!0}}]);