"use strict";(self.webpackChunkspace_hal_2=self.webpackChunkspace_hal_2||[]).push([[5616],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return m}});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=t.createContext({}),s=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=s(r),m=i,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return r?t.createElement(f,l(l({ref:n},c),{},{components:r})):t.createElement(f,l({ref:n},c))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,l=new Array(o);l[0]=p;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=r[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},78273:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var t=r(87462),i=r(63366),o=(r(67294),r(3905)),l={title:"Inertiale Messeinheit - Gyroskop, Beschleunigungssensor und Magnetometer",sidebar_label:"Inertiale Messeinheit",custom_edit_url:null},a=void 0,u={unversionedId:"zumo32u4/gyroscope",id:"zumo32u4/gyroscope",isDocsHomePage:!1,title:"Inertiale Messeinheit - Gyroskop, Beschleunigungssensor und Magnetometer",description:"Pololu Zumo 32u4 Library: Inertiale Messeinheit",source:"@site/docs/zumo32u4/gyroscope.md",sourceDirName:"zumo32u4",slug:"/zumo32u4/gyroscope",permalink:"/docs/zumo32u4/gyroscope",editUrl:null,tags:[],version:"current",frontMatter:{title:"Inertiale Messeinheit - Gyroskop, Beschleunigungssensor und Magnetometer",sidebar_label:"Inertiale Messeinheit",custom_edit_url:null},sidebar:"sideBarZumo",previous:{title:"Radencoder",permalink:"/docs/zumo32u4/encode"}},s=[{value:"Sensortyp ermitteln",id:"sensortyp-ermitteln",children:[]},{value:"<code>enableDefault();</code>",id:"enabledefault",children:[]},{value:"<code>configureForTurnSensing();</code>",id:"configureforturnsensing",children:[]},{value:"<code>configureForBalancing();</code>",id:"configureforbalancing",children:[]},{value:"<code>configureForFaceUphill();</code>",id:"configureforfaceuphill",children:[]},{value:"Drehwinkel mit Gyroskop bestimmen",id:"drehwinkel-mit-gyroskop-bestimmen",children:[]}],c={toc:s};function d(e){var n=e.components,r=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Pololu Zumo 32u4 Library: ",(0,o.kt)("a",{parentName:"em",href:"https://pololu.github.io/zumo-32u4-arduino-library/class_zumo32_u4_i_m_u.html"},"Inertiale Messeinheit"))),(0,o.kt)("h2",{id:"sensortyp-ermitteln"},"Sensortyp ermitteln"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Zumo32U4IMUType imuType;\n\nimuType = imu.getType();\nSerial.println("IMU Type:");\nswitch (imuType) {\ncase Zumo32U4IMUType::LSM303D_L3GD20H:\n    Serial.println("LSM303D L3GD20H");\n    break;\ncase Zumo32U4IMUType::LSM6DS33_LIS3MDL:\n    Serial.println("LSM6DS33 LIS3MDL");\n    break;\ncase Zumo32U4IMUType::Unknown:\n    Serial.println("Unknown");\n    break;\n}\n')),(0,o.kt)("h2",{id:"enabledefault"},(0,o.kt)("inlineCode",{parentName:"h2"},"enableDefault();")),(0,o.kt)("h2",{id:"configureforturnsensing"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureForTurnSensing();")),(0,o.kt)("h2",{id:"configureforbalancing"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureForBalancing();")),(0,o.kt)("h2",{id:"configureforfaceuphill"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureForFaceUphill();")),(0,o.kt)("p",null,"   void readAcc();"),(0,o.kt)("p",null,"   void readGyro();"),(0,o.kt)("p",null,"   void readMag();"),(0,o.kt)("p",null,"   void read();"),(0,o.kt)("p",null,"   bool accDataReady();"),(0,o.kt)("p",null,"   bool gyroDataReady();"),(0,o.kt)("p",null,"   bool magDataReady();"),(0,o.kt)("h2",{id:"drehwinkel-mit-gyroskop-bestimmen"},"Drehwinkel mit Gyroskop bestimmen"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'/* Das Beispielprogramm liest die Rohdaten des Gyroskops vom Zumo 32u4 \xfcber die I2C Schnittstelle \n    ein und gibt Drehwinkel auf dem LCD-Display aus. Der verwendete Sensor ist der L3GD20H oder\n    der LSM6DS33 von STMicroeletronics.\n*/\n\n#include <Wire.h>                 // I2C Bibliothek\n#include <Zumo32U4.h>\n\nZumo32U4IMU imu;                  // Objekt f\xfcr Inertialsensoren\nZumo32U4LCD lcd;\n\nunsigned long lastTime = 0;       // Display Update-Zeit\nunsigned long gyroLastUpdate = 0; // Zeitdifferenz zwischen Gyro-Messung\nfloat offSet = 0;                 // Offset-Fehler in mdps/digit (milli degree per second/digit)\nfloat winkel  = 0;                // Einheit: deg (Gradma\xdf 0 ... 360\xb0)\n\nvoid setup(){\n    Serial.begin(115200);\n\n    lcd.clear(); lcd.print("Gyro Cal");\n    lcd.gotoXY(0, 1); lcd.print("ibration");\n\n    Wire.begin();\n    imu.init();\n    imu.configureForTurnSensing();        // Empfindlichkeit und Filter einstellen\n\n    // Ermitteln des Offset-Fehlers des Gyroskops\n    float sumGyro = 0;\n    for (long i = 0 ; i < 2000; i++) {\n        while (!imu.gyroDataReady()) {}   // Warten auf neue Gyro-Daten\n        imu.readGyro();                   // Einlesen der Gyro-Daten\n        sumGyro += imu.g.z;               // imu.g.z: Winkelgeschwindigkeit der z-Achse in mdps/digit\n    }\n    offSet = sumGyro / 2000;              // Offset-Fehler berechnen\n\n    gyroLastUpdate = micros();\n    lcd.clear();  lcd.print("Winkel:");\n}\n\nvoid loop()\n{\n    unsigned long now = micros();         // Zeit in Mikrosekunden (\xb5s)\n    long dt = now - gyroLastUpdate;       // Zeitdifferenz in Mikrosekunden (\xb5s)\n    gyroLastUpdate = now;\n\n    float drehRate, deltaWinkel;\n    imu.readGyro();                       // Einlesen der Gyro-Daten\n    drehRate = (imu.g.z - offSet) * 0.07; // Winkelgeschwindigkeit in umgerechnet in deg/s (Gradma\xdf/Sekunde)\n    deltaWinkel = drehRate * dt / 1e6;    // Winkel\xe4nderung pro Zeitintervall (dt in Sekunden umrechnen)\n    winkel += deltaWinkel;                // Drehwinkel als Summe aller Winkel\xe4nderung\n\n    if (millis() - lastTime > 200) {\n        lastTime = millis();\n        lcd.gotoXY(0, 1); lcd.print(winkel ); lcd.print("   ");\n    }\n}\n')))}d.isMDXComponent=!0}}]);