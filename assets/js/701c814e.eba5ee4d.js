"use strict";(self.webpackChunkspacehale=self.webpackChunkspacehale||[]).push([[3289],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},o={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),p=u(t),g=i,c=p["".concat(s,".").concat(g)]||p[g]||o[g]||r;return t?a.createElement(c,l(l({ref:n},m),{},{components:t})):a.createElement(c,l({ref:n},m))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var u=2;u<r;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9887:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>o,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var a=t(7462),i=(t(7294),t(3905));const r={title:"Endliche Automaten (Finite State Machine)",sidebar_label:"Endliche Automaten",description:"Endlichen Automaten (Zustandsdiagramme) mit dem enum Aufz\xe4hlungstyp und der switch-case Anweisung im Arduino realisieren.",custom_edit_url:null,keywords:["Arduino","Endlichen Automaten","Zustandsdiagramm","switch-case","Finite State Machine","State Machine"]},l=void 0,d={unversionedId:"arduino/stateMachine",id:"arduino/stateMachine",title:"Endliche Automaten (Finite State Machine)",description:"Endlichen Automaten (Zustandsdiagramme) mit dem enum Aufz\xe4hlungstyp und der switch-case Anweisung im Arduino realisieren.",source:"@site/docs/arduino/stateMachine.md",sourceDirName:"arduino",slug:"/arduino/stateMachine",permalink:"/docs/arduino/stateMachine",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{title:"Endliche Automaten (Finite State Machine)",sidebar_label:"Endliche Automaten",description:"Endlichen Automaten (Zustandsdiagramme) mit dem enum Aufz\xe4hlungstyp und der switch-case Anweisung im Arduino realisieren.",custom_edit_url:null,keywords:["Arduino","Endlichen Automaten","Zustandsdiagramm","switch-case","Finite State Machine","State Machine"]},sidebar:"mySidebar",previous:{title:"Arrays (Feld)",permalink:"/docs/arduino/array"},next:{title:"PWM Signale",permalink:"/docs/arduino/pwm"}},s={},u=[{value:"Wichtige Begriffe",id:"wichtige-begriffe",level:2},{value:"Zustandsdiagramm",id:"zustandsdiagramm",level:2},{value:"Programmiertechniken",id:"programmiertechniken",level:2},{value:"<code>enum</code> Aufz\xe4hlungstyp",id:"enum-aufz\xe4hlungstyp",level:3},{value:"<code>switch-case</code> Verzweigung",id:"switch-case-verzweigung",level:3},{value:"Arduino-Programmbeispiel",id:"arduino-programmbeispiel",level:3}],m={toc:u};function o(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://spacehal.github.io/docs/arduino/stateMachine"})),(0,i.kt)("p",null,"Programme oder logische Systeme, welche eine ",(0,i.kt)("strong",{parentName:"p"},"endliche")," Anzahl verschiedener Zust\xe4nde aufweisen und diese nach festgelegten Kriterien \xe4ndern sollen, k\xf6nnen durch ",(0,i.kt)("a",{parentName:"p",href:"https://de.wikipedia.org/wiki/Endlicher_Automat"},"endliche Automaten")," (auch endliche Zustandsmaschine oder ",(0,i.kt)("em",{parentName:"p"},"finit state machine - FSM"),") modelliert werden. Ein endlicher Automat soll ein Verhalten modellieren, welches auf einer endlichen Anzahl von ",(0,i.kt)("strong",{parentName:"p"},"Zust\xe4nden"),", ",(0,i.kt)("strong",{parentName:"p"},"Aktionen")," und ",(0,i.kt)("strong",{parentName:"p"},"Zustands\xfcberg\xe4ngen")," basiert. "),(0,i.kt)("h2",{id:"wichtige-begriffe"},"Wichtige Begriffe"),(0,i.kt)("p",null,"Im Folgenden werden die Begriffe am Beispiel der ",(0,i.kt)("a",{parentName:"p",href:"/docs/arduino/millis#blinken-mit-millis"},"blinkenden LED mit der millis()-Funktion")," erl\xe4utert:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Zust\xe4nde")," speichern Information bzw. einen Status ab. Im Beispiel der blinkende LED wird daf\xfcr die Variable ",(0,i.kt)("inlineCode",{parentName:"li"},"zustandLED")," verwendet, welche angibt, ob die LED an- oder ausgeschaltet ist. Zust\xe4nde alleine \xe4ndern das System jedoch nicht, daf\xfcr ist immer eine ",(0,i.kt)("em",{parentName:"li"},"Aktion")," notwendig!"),(0,i.kt)("li",{parentName:"ul"},"Durch eine ",(0,i.kt)("strong",{parentName:"li"},"Aktion")," wird der Zustand des endlichen Automaten ge\xe4ndert. Wann ein bestimmter Zustand ge\xe4ndert bzw. angenommen wird, h\xe4ngt von dem System ab. Bei der blinkenden LED wird der Zustand des Automaten mit dem Befehl ",(0,i.kt)("inlineCode",{parentName:"li"},"digitalWrite(LED, zustandLED)")," nach der Zeitabfrage ge\xe4ndert."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Zustands\xfcberg\xe4nge")," oder auch ",(0,i.kt)("strong",{parentName:"li"},"Zustands\xe4nderungen")," werden in der Regel durch Programmverzweigungen wie ",(0,i.kt)("inlineCode",{parentName:"li"},"if-else")," oder ",(0,i.kt)("inlineCode",{parentName:"li"},"switch-case")," beschrieben. Sie geben an, unter welchen Bedingungen ein Zustand in einen anderen wechseln soll. Beim Blink-Beispiel gibt es genau zwei Zustands\xe4nderungen: Anschalten und Ausschalten der LED. ")),(0,i.kt)("h2",{id:"zustandsdiagramm"},"Zustandsdiagramm"),(0,i.kt)("p",null,"Mit einem Zustandsdiagramm lassen sich endliche Automaten graphisch darstellen. Das abgebildete Zustandsdiagramm beschreibt den endlichen Automaten f\xfcr die ",(0,i.kt)("a",{parentName:"p",href:"/docs/arduino/millis#blinken-mit-millis"},"blinkende LED"),"."),(0,i.kt)("img",{src:"/img/arduino/Automat.png",alt:"drawing",width:"460pt",className:"center"}),(0,i.kt)("p",null,"In einem Zustandsdiagramm wird das Verhalten eines endlichen Automaten anschaulich dargestellt. Die ",(0,i.kt)("strong",{parentName:"p"},"Zust\xe4nde")," des Automaten werden hierbei mit Kreisen oder abgerundeten Vierecken abgebildet. Jeder Zustand darf nur einmal dargestellt werden."),(0,i.kt)("p",null,"Erlaubte ",(0,i.kt)("strong",{parentName:"p"},"Zustands\xfcberg\xe4nge")," werden mit Pfeilen dargestellt. ",(0,i.kt)("strong",{parentName:"p"},"Aktionen"),", die zu Zustands\xe4nderungen f\xfchren, m\xfcssen nicht unbedingt dargestellt werden, k\xf6nnen aber f\xfcr das Verst\xe4ndnis sehr hilfreich sein. Das Gleiche gilt f\xfcr die Bedingungen, unter welchen der Automat seine Zust\xe4nde \xe4ndert. "),(0,i.kt)("p",null,"Im Allgemeinen gilt, so lange wie es dem Verst\xe4ndnis und der \xdcbersichtlichkeit dient, sollten die Aktionen und die notwendigen Bedingungen vermerkt werden, ansonsten ist darauf zu verzichten."),(0,i.kt)("h2",{id:"programmiertechniken"},"Programmiertechniken"),(0,i.kt)("p",null,"Im Abschnitt ",(0,i.kt)("a",{parentName:"p",href:"/docs/arduino/millis"},"Zeitkritische Aufgaben")," wurde der oben abgebildete Automat mit Hilfe der Variablen ",(0,i.kt)("inlineCode",{parentName:"p"},"int zustandLED")," und der ",(0,i.kt)("inlineCode",{parentName:"p"},"if-else")," Verzweigung programmiert. Bei Automaten mit mehr als nur zwei Zust\xe4nden oder bei geschachtelten Automaten gibt es jedoch einen besseren Ansatz, der das Programm \xfcbersichtlicher und lesbarer macht."),(0,i.kt)("p",null,"Ein etwas komplexerer Automat, welcher im Folgenden programmiert werden soll, l\xe4sst sich mit zwei LEDs erstellen. \xc4hnlich wie bei der blinkenden LED, wechselt der Automat nach einer vorgegeben Zeitspanne seinen Zustand. Im Zustandsdiagramm sind die vier m\xf6glichen Zust\xe4nde mit den erlaubten Zustands\xfcberg\xe4ngen abgebildet."),(0,i.kt)("img",{src:"/img/arduino/Automat2LEDs.png",alt:"drawing",width:"430pt",className:"center"}),(0,i.kt)("h3",{id:"enum-aufz\xe4hlungstyp"},(0,i.kt)("inlineCode",{parentName:"h3"},"enum")," Aufz\xe4hlungstyp"),(0,i.kt)("p",null,"Das Schl\xfcsselwort ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," erm\xf6glicht die Aufz\xe4hlung von Konstanten. Mit ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," wird ein Aufz\xe4hlungstyp deklariert:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"enum LedStates {AUS, LED1, LED12, LED2};  // Typendeklaration (Aufz\xe4hlungstyp)\n")),(0,i.kt)("p",null,"Mit dieser Zeile wird der Aufz\xe4hlungstyp  ",(0,i.kt)("inlineCode",{parentName:"p"},"LedStates")," mit den Konstanten ",(0,i.kt)("inlineCode",{parentName:"p"},"AUS"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LED1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LED12"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LED2")," deklariert."),(0,i.kt)("p",null,"Nach dieser Deklaration ist es m\xf6glich, die Variable ",(0,i.kt)("inlineCode",{parentName:"p"},"ledState")," als ",(0,i.kt)("inlineCode",{parentName:"p"},"LedStates"),"-Typ zu deklarieren und ihr den Wert ",(0,i.kt)("inlineCode",{parentName:"p"},"AUS")," zuzuweisen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-arduino"},"LedStates ledState; // Variablendeklaration\nledState = AUS;     // Variablenzuweisung\n")),(0,i.kt)("p",null,"Da der ",(0,i.kt)("inlineCode",{parentName:"p"},"LedStates")," vorher als Aufz\xe4hlungstyp deklariert wurde, kann der Variablen ",(0,i.kt)("inlineCode",{parentName:"p"},"ledState")," nur einer der vorher deklarierten Werte zugewiesen werden. Hier wird der Variablen ",(0,i.kt)("inlineCode",{parentName:"p"},"ledState")," der Wert ",(0,i.kt)("inlineCode",{parentName:"p"},"AUS")," zugewiesen."),(0,i.kt)("p",null,"Wie bei einfachen Variablen kann die Deklaration und die Zuweisung auch in einer Zeile durchgef\xfchrt werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-arduino"},"LedStates ledState  = AUS; // Variablendeklaration und Zuweisung\n")),(0,i.kt)("h3",{id:"switch-case-verzweigung"},(0,i.kt)("inlineCode",{parentName:"h3"},"switch-case")," Verzweigung"),(0,i.kt)("p",null,"\xc4hnlich wie bei der ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," Verzweigung, erm\xf6glicht es die ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/reference/de/language/structure/control-structure/switchcase/"},(0,i.kt)("inlineCode",{parentName:"a"},"switch-case")," Verzweigung"),", den Programmablauf in Abh\xe4ngigkeit von verschiedene Bedingungen zu kontrollieren. Besonders geeignet ist die  ",(0,i.kt)("inlineCode",{parentName:"p"},"switch-case")," Verzweigung f\xfcr den Fall, dass viele verschiedene Bedingungen abgefragt werden sollen."),(0,i.kt)("p",null,"Als einfaches Beispiel wird die Variable ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," ausgewertet. F\xfcr den Fall, dass ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," die Werte ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," oder ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," annimmt, soll das Programm spezielle Anweisungen ausf\xfchren. F\xfcr alle anderen Werte von ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," wird der so genannte Default-Fall ausgef\xfchrt."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-arduino"},'int a = 2;\n\nswitch (a)                      // Nach dem Schl\xfcsselwort folgt in Klammern der auszuwertende Ausdruck\n{\n  case 1:                       // Vergleicht `a` mit dem Wert nach case (hier 1).\n    Serial.println("Fall 1.");        \n    break;                      // Beendet die gesamte Switch-Verzweigung. \n\n  case 2:\n     Serial.println("Fall 2.");  // Da a=2 ist, w\xfcrde der hier stehen Code ausgef\xfchrt werden ...\n    break;\n\n  case 3:\n    Serial.println("Fall 3.");\n    break;\n\n  default:                       // Wenn `a` keinem der aufgef\xfchrten Werte entspricht\n    Serial.println("Alle anderen Zust\xe4nde.");\n}\n')),(0,i.kt)("h3",{id:"arduino-programmbeispiel"},"Arduino-Programmbeispiel"),(0,i.kt)("p",null,"Die ",(0,i.kt)("inlineCode",{parentName:"p"},"switch-case")," Verzweigung eignet sich zusammen mit der ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," Aufz\xe4hlung besonders gut zur Programmierung eines Automaten. Am Beispiel des Automaten mit 2 LEDs soll das Grundprinzip erl\xe4utert werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-arduino"},"#define pinLed1 6  // LED_1\n#define pinLed2 5  // LED_2\n\n// Zust\xe4nde des Automaten als Aufz\xe4hlungstyp deklarieren\nenum LedStates {AUS, LED_1, LED_12, LED_2};\nLedStates ledState = AUS;\n\nunsigned long letzteZeit = 0;  //  Zeitpunkt letzte LED-\xc4nderung\nconst    long intervall  = 500;    // Blinkintervall in ms (Konstante)\n\nvoid setup() {\n  pinMode(pinLed1, OUTPUT);\n  pinMode(pinLed2, OUTPUT);\n} \n\nvoid loop() {\n\n  // Bedingung f\xfcr den Zustands\xfcbergang. Der Automat soll seinen Zustand nur \xe4ndern,\n  // wenn die angegebene Intervall-Zeit \xfcberschritten ist.\n  if (millis() - letzteZeit >= intervall)\n  {\n    letzteZeit = millis();  // Zeitstempel f\xfcr Zeitvergleich\n\n    // Jeder `case` der switch-Verzweigung entspricht dem *alten* Zustand des Automaten\n    // und gibt an, in welchen neuen Zustand gewechselt werden soll. In der case-Anweisung\n    // wird der neue Zustand des Automaten aktualisiert. Der neue Zustand wird sofort\n    // aktiviert, die entsprechenden LEDs werden an oder ausgeschaltet.\n    switch (ledState)\n    {\n      case AUS:                      // aktueller Zustand: AUS\n        ledState = LED_1;            // neuer Zustand des Automaten: LED_1\n        digitalWrite(pinLed1, HIGH); // LED_1 AN\n        digitalWrite(pinLed2, LOW);  // LED_2 AUS\n        break;                       // ohne die break-Anweisung w\xfcrde sofort 'case LED_2' ausgef\xfchrt werden\n\n      case LED_1:                    // aktueller Zustand: LED 1 an\n        ledState = LED_12;\n        digitalWrite(pinLed1, HIGH);\n        digitalWrite(pinLed2, HIGH);\n        break;\n\n      case LED_12:                   // aktueller Zustand: LED 1&2 an\n        ledState = LED_2;\n        digitalWrite(pinLed1, LOW);\n        digitalWrite(pinLed2, HIGH);\n        break;\n\n      case LED_2:                    // aktueller Zustand: LED 2 an\n        ledState = AUS;\n        digitalWrite(pinLed1, LOW);\n        digitalWrite(pinLed2, LOW);\n        break;\n\n        // Der Default-Fall wird nicht ben\xf6tigt, da alle Wert abgefragt werden.\n    }\n  }\n}\n")),(0,i.kt)("p",null,"Automaten und Zustandsdiagramme sind besonders bei der Programmierung von ",(0,i.kt)("strong",{parentName:"p"},"Robotern")," sehr wichtig, da diese ein Vielzahl verschiedener Zust\xe4nde einnehmen k\xf6nnen."),(0,i.kt)("details",{className:"ueben"}," ",(0,i.kt)("summary",null,"Aufgaben"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Kopieren Sie des ",(0,i.kt)("a",{parentName:"p",href:"/docs/arduino/stateMachine#arduino-programmbeispiel"},"Beispielprogramm")," und lassen sie es auf Ihrem Arduino mit der entsprechenden Schaltung laufen. Untersuchen Sie, was passiert, wenn einige der ",(0,i.kt)("inlineCode",{parentName:"p"},"break"),"-Anweisung auskommentiert (",(0,i.kt)("inlineCode",{parentName:"p"},"// "),") werden. Wie verh\xe4lt sich dann Ihr Programm?")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Zeichnen Sie ein Zustandsdiagramm f\xfcr den Automaten mit ",(0,i.kt)("strong",{parentName:"p"},"zwei LEDs,")," bei dem folgende \xdcberg\xe4nge bzw. Zust\xe4nde erlaubt sind. Nach dem letzten Zustand springt der Automat in der ersten Zustand zur\xfcck."),(0,i.kt)("p",{parentName:"li"}," alle Leds ",(0,i.kt)("strong",{parentName:"p"},"aus")," ",(0,i.kt)("span",null,"\u2192")," Led ",(0,i.kt)("strong",{parentName:"p"},"1 an"),", Led 2 aus ",(0,i.kt)("span",null,"\u2192")," alle Leds ",(0,i.kt)("strong",{parentName:"p"},"aus")," ",(0,i.kt)("span",null,"\u2192"),"  Led ",(0,i.kt)("strong",{parentName:"p"},"1&2 an")," ",(0,i.kt)("span",null,"\u2192"),"  alle LEDs ",(0,i.kt)("strong",{parentName:"p"},"aus")," ",(0,i.kt)("span",null,"\u2192")," Led ",(0,i.kt)("strong",{parentName:"p"},"2 an"),", Led 1 aus ",(0,i.kt)("span",null,"\u2192")," . . .")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Schreiben Sie ein Programm f\xfcr den obigen Automaten und testen Sie es an einer entsprechenden Schaltung.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\xc4ndern Sie das Programm f\xfcr den urspr\xfcnglichen ",(0,i.kt)("a",{parentName:"p",href:"/docs/arduino/stateMachine#arduino-programmbeispiel"},"Automaten mit 2 LEDs")," so, dass f\xfcr jeden der vier Zust\xe4nde ein eigenes Zeitintervall (",(0,i.kt)("inlineCode",{parentName:"p"},"dTime1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dTime2"),",...) angegeben werden kann, in welchem er aktiv ist. Oder anders ausgedr\xfcckt, jeder der vier Zust\xe4nde soll unterschiedlich lange aktiv sein.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Programmieren Sie einen ",(0,i.kt)("strong",{parentName:"p"},"Reaktionstester"),". Bauen Sie daf\xfcr zuerst eine Schaltung ",(0,i.kt)("strong",{parentName:"p"},"mit zwei Tastern und zwei verschiedenfarbigen LEDs")," auf. Implementieren Sie folgendes Verhalten:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Als Indikator, das der Test beginnen kann, leuchtet zu Beginn die ",(0,i.kt)("strong",{parentName:"p"},"LED 1")," und auf dem seriellen Monitor wird folgender Text ausgegeben:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"-------------------------------\nReaktionstester bereit!\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Anschlie\xdfend wird der ",(0,i.kt)("strong",{parentName:"p"},"Taster S1")," gedr\xfcckt. Auf dem seriellen Monitor erscheint der Text:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Warten auf das rote Licht ...\n")),(0,i.kt)("p",{parentName:"li"},"Jetzt wird gewartet bis die ",(0,i.kt)("strong",{parentName:"p"},"LED 2")," aufleuchtet.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Nach einer ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/reference/de/language/functions/random-numbers/random/"},"zuf\xe4lligen")," Zeit leuchtet die ",(0,i.kt)("strong",{parentName:"p"},"LED 2")," auf und die ",(0,i.kt)("strong",{parentName:"p"},"LED 1")," f\xe4ngt an schnell zu blinken. Von diesem Zeitpunkt wird die Zeit gemessen, bis der ",(0,i.kt)("strong",{parentName:"p"},"Taster 2")," bet\xe4tigt wird.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Sobald der ",(0,i.kt)("strong",{parentName:"p"},"Taster 2")," gedr\xfcckt wurde, erlischt die ",(0,i.kt)("strong",{parentName:"p"},"LED 1")," und auf dem seriellen Monitor wird die Reaktionszeit in Sekunden angegeben:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Reaktionszeit: 1,23 Sekunden\n-------------------------------\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Zeichnen Sie das Zustandsdiagramm f\xfcr eine einfache Autoampel (mit den Bedingungen f\xfcr die Zustands\xfcberg\xe4nge). F\xfcr die Zeiten der einzelnen Ampelphasen gilt:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ROT: 3 Sekunden"),(0,i.kt)("li",{parentName:"ul"},"ROT-GELB: 0.5 Sekunden"),(0,i.kt)("li",{parentName:"ul"},"GR\xdcN: 3 Sekunden"),(0,i.kt)("li",{parentName:"ul"},"GELB: 1 Sekunde")),(0,i.kt)("p",{parentName:"li"},"Bauen Sie anschlie\xdfend eine geeignete Schaltung auf und programmieren Sie mit der ",(0,i.kt)("inlineCode",{parentName:"p"},"switch-case")," Anweisung und dem ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," Datentyp den endlichen Automaten f\xfcr die Ampel.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Entwickeln Sie ein Programm und eine elektrische Schaltung zur Simulation  einer ",(0,i.kt)("strong",{parentName:"p"},"Ampelanlage f\xfcr Fu\xdfg\xe4nger")," (eine Fu\xdfg\xe4ngerampel ",(0,i.kt)("inlineCode",{parentName:"p"},"FA")," und eine Ampel f\xfcr PKWs ",(0,i.kt)("inlineCode",{parentName:"p"},"PA"),"). \xc4hnlich wie  bei ",(0,i.kt)("em",{parentName:"p"},"echten")," Ampelanlagen f\xfcr Fu\xdfg\xe4nger, darf die Fu\xdfg\xe4ngerampel erst nach dem Bet\xe4tigen eines Tasters (",(0,i.kt)("em",{parentName:"p"},"Anforderung durch einen Fu\xdfg\xe4nger"),") und einer gewissen Wartezeit auf Gr\xfcn umschalten.  Beachten Sie bei der Bearbeitung der Aufgabe folgende Punkte:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Erstellen Sie ein ",(0,i.kt)("strong",{parentName:"li"},"vollst\xe4ndiges Zustandsdiagramm")," f\xfcr beide Ampeln. Recherchieren Sie die m\xf6glichen Zust\xe4nde der Ampeln und benennen Sie diese sinnvoll (",(0,i.kt)("inlineCode",{parentName:"li"},"FArot"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"FAgruen"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"PArot"),", ...). Geben Sie im Zustandsdiagramm alle Zust\xe4nde und Bedingungen f\xfcr die Zustands\xfcberg\xe4nge korrekt an."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Entwickeln Sie eine Schaltung")," f\xfcr die Ampelanlage. ",(0,i.kt)("strong",{parentName:"li"},"Zeichnen Sie Ihre Schaltung auf")," und bauen Sie sie anschlie\xdfend auf dem Steckbrett auf. Vergessen Sie nicht den Taster f\xfcr die Fu\xdfg\xe4ngeranforderung."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Schreiben Sie ein Programm"),", welches ihr Zustandsdiagramm umsetzt. Verwenden Sie die ",(0,i.kt)("inlineCode",{parentName:"li"},"switch-case"),"-Anweisung."))))))}o.isMDXComponent=!0}}]);